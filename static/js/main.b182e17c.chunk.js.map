{"version":3,"sources":["App.js","components/Edit.js","Firebase.js","components/Create.js","components/Show.js","components/AdminApp.js","index.js"],"names":["App","props","onCollectionUpdate","querySnapshot","agendas","forEach","doc","data","service","dateFormatString","client","confirmed","dateFormatDate","push","key","id","setState","ref","firebase","collection","orderBy","unsubscribe","state","date","Date","this","onSnapshot","timerID","setInterval","tick","clearInterval","dataComent","bgcolor","style","width","height","type","checked","class","to","marginLeft","toLocaleString","weekday","year","month","day","hour","minute","second","hour12","map","Coment","toDate","getFullYear","activeDate","noActiveDate","getMonth","getDate","getHours","getMinutes","getSeconds","Component","Edit","services","idService","name","description","onChangeOnlyLetters","e","target","value","replace","onChangeChecked","onChange","onSubmit","preventDefault","set","then","docRef","history","catch","error","console","alert","list","handleChange","bind","match","params","get","exists","log","startDate","for","data-toggle","title","required","Service","selected","showTimeSelect","locale","timeFormat","timeIntervals","timeCaption","dateFormat","className","placeholderText","placeholder","minlength","maxlength","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","settings","registerLocale","es","Create","add","firestore","disabled","hidden","Show","isLoading","delete","onClick","ReactDOM","render","basename","process","exact","path","component","AdminApp","document","getElementById"],"mappings":"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","file":"static/js/main.b182e17c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './App.css';\n//import firebase from './Firebase';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.ref = firebase.firestore().collection('agendas').orderBy('dateFormatDate', 'desc');\n    this.unsubscribe = null;\n    this.state = {\n      agendas: [],\n      date: new Date()\n    };\n  }\n\n  onCollectionUpdate = (querySnapshot) => {\n    const agendas = [];\n    querySnapshot.forEach((doc) => {\n      const { service, dateFormatString, client, confirmed, dateFormatDate } = doc.data();\n      agendas.push({\n        key: doc.id,\n        doc, // DocumentSnapshot\n        service,\n        dateFormatString,\n        client,\n        confirmed,\n        dateFormatDate\n      });\n    });\n    this.setState({\n      agendas\n   });   \n  }\n\n  componentDidMount() {\n    this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate);\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n  \n  activeDate(dataComent){\n    return (                    \n      <tbody>\n      <tr bgcolor=\"#fff\">\n        <td>{dataComent.service}</td>\n        <td>{dataComent.dateFormatString}</td>\n        <td>{dataComent.client}</td>\n        <td><input style={{ width: 16, height: 16 }} type=\"checkbox\" checked={dataComent.confirmed}  /></td>\n      </tr>                    \n      </tbody>\n    )\n  };\n\n  noActiveDate(dataComent){\n    return (                    \n      <tbody>\n      <tr bgcolor=\"#ddd\">\n        <td><s>{dataComent.service}</s></td>\n        <td><s>{dataComent.dateFormatString}</s></td>\n        <td><s>{dataComent.client}</s></td>\n        <td><input style={{ width: 16, height: 16 }} type=\"checkbox\" checked={dataComent.confirmed}  /></td>\n      </tr>                    \n      </tbody>\n    )\n  };\n\n  render() {\n    const options = {\n      weekday: \"long\", \n      year: \"numeric\", \n      month: \"long\", \n      day: \"numeric\", \n      hour: \"numeric\", \n      minute: \"numeric\",\n      second: \"numeric\",\n      hour12:\"false\"};\n    \n    \n\n    return (\n      <div class=\"container\">\n        <div class=\"panel panel-default\">\n          <div class=\"panel-heading\">          \n            <h3 class=\"panel-title\">\n              SERVICIOS AGENDADOS\n            </h3>\n          </div>\n          <div class=\"panel-body\">\n            <div class=\"row\">\n              <h4><Link to={\"/create\"} class=\"btn btn-primary\">Agendar Nuevo Servicio</Link></h4>\n              <h4 style={{ marginLeft: \"auto\" }}><Link to={\"/AdminApp\"} class=\"btn btn-dark\">Acceso Administrador</Link></h4>\n            </div>\n          <div>\n            <strong>Fecha y hora actual </strong>\n          </div>\n          <div>\n            <label>{this.state.date.toLocaleString(\"es-Co\", options)}</label>         \n          </div>         \n            <table class=\"table table-stripe\">\n              <thead>\n                <tr>\n                  <th>Tipo de Servicio</th>\n                  <th>Fecha y Hora</th>\n                  <th>Nombre del Cliente</th>\n                  <th>Agenda Confirmada</th>\n                </tr>\n              </thead>\n               { this.state.agendas.map(Coment =>                 \n                  {if (Coment.dateFormatDate.toDate().getFullYear(\"en-EN\") > this.state.date.getFullYear(\"en-EN\")) {\n                    let dateIsActive = this.activeDate(Coment);\n                    return(\n                      dateIsActive\n                    )\n                  } \n                    if (Coment.dateFormatDate.toDate().getFullYear(\"en-EN\") < this.state.date.getFullYear(\"en-EN\")) {                      \n                      let dateIsNotActive = this.noActiveDate(Coment);\n                      return(\n                      dateIsNotActive\n                      )                   \n                    }\n                      if (Coment.dateFormatDate.toDate().getFullYear(\"en-EN\") == this.state.date.getFullYear(\"en-EN\")) {\n                        if (Coment.dateFormatDate.toDate().getMonth(\"en-EN\") > this.state.date.getMonth(\"en-EN\")) {                      \n                          let dateIsActive = this.activeDate(Coment);\n                          return(\n                            dateIsActive\n                          )\n                      }\n                        if (Coment.dateFormatDate.toDate().getMonth(\"en-EN\") < this.state.date.getMonth(\"en-EN\")) {                      \n                            let dateIsNotActive = this.noActiveDate(Coment);\n                            return(\n                              dateIsNotActive\n                            )\n                        }\n                          if (Coment.dateFormatDate.toDate().getMonth(\"en-EN\") == this.state.date.getMonth(\"en-EN\")) {                      \n                            if (Coment.dateFormatDate.toDate().getDate(\"en-EN\") > this.state.date.getDate(\"en-EN\")) {                      \n                                let dateIsActive = this.activeDate(Coment);\n                                return(\n                                  dateIsActive\n                                )\n                            }\n                              if (Coment.dateFormatDate.toDate().getDate(\"en-EN\") < this.state.date.getDate(\"en-EN\")) {                      \n                                let dateIsNotActive = this.noActiveDate(Coment);\n                                return(\n                                  dateIsNotActive\n                                )\n                              }\n                                if (Coment.dateFormatDate.toDate().getDate(\"en-EN\") == this.state.date.getDate(\"en-EN\")) {                      \n                                  if (Coment.dateFormatDate.toDate().getHours(\"en-EN\") > this.state.date.getHours(\"en-EN\")) {                      \n                                    let dateIsActive = this.activeDate(Coment);\n                                    return(\n                                      dateIsActive\n                                    )\n                                  }\n                                    if (Coment.dateFormatDate.toDate().getHours(\"en-EN\") < this.state.date.getHours(\"en-EN\")) {                      \n                                      let dateIsNotActive = this.noActiveDate(Coment);\n                                      return(\n                                        dateIsNotActive\n                                      )\n                                    }\n                                      if (Coment.dateFormatDate.toDate().getHours(\"en-EN\") == this.state.date.getHours(\"en-EN\")) {                      \n                                        if (Coment.dateFormatDate.toDate().getMinutes(\"en-EN\") > this.state.date.getMinutes(\"en-EN\")) {                      \n                                          let dateIsActive = this.activeDate(Coment);\n                                          return(\n                                            dateIsActive\n                                          )\n                                        }\n                                          if (Coment.dateFormatDate.toDate().getMinutes(\"en-EN\") < this.state.date.getMinutes(\"en-EN\")) {                      \n                                            let dateIsNotActive = this.noActiveDate(Coment);\n                                            return(\n                                              dateIsNotActive\n                                            )\n                                          }\n                                            if (Coment.dateFormatDate.toDate().getMinutes(\"en-EN\") == this.state.date.getMinutes(\"en-EN\")) {                      \n                                              if (Coment.dateFormatDate.toDate().getSeconds(\"en-EN\") >= this.state.date.getSeconds(\"en-EN\")) {                      \n                                                let dateIsActive = this.activeDate(Coment);\n                                                return(\n                                                  dateIsActive\n                                                )\n                                              } else {                      \n                                                let dateIsNotActive = this.noActiveDate(Coment);\n                                                return(\n                                                  dateIsNotActive\n                                                )\n                                              }                              \n                                            }\n                                        }\n                                  }\n                            }\n                      }                                          \n                   }                                  \n                )}              \n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../App.css';\r\nimport DatePicker from 'react-datepicker';\r\n//import firebase from '../Firebase';\r\nimport * as firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass Edit extends Component {\r\n\r\n  constructor(props) {\r\n    const options = {\r\n      weekday: \"long\", \r\n      year: \"numeric\", \r\n      month: \"long\", \r\n      day: \"numeric\", \r\n      hour: \"numeric\", \r\n      minute: \"numeric\", \r\n      hour12:\"false\"};\r\n      \r\n    super(props);\r\n    this.list = firebase.firestore().collection('services').orderBy('idService', 'asc');\r\n    this.state = {\r\n      service: '',\r\n      dateFormatString: '',\r\n      dateFormatString: new Date().toLocaleString(\"es-Co\", options),\r\n      client: '',\r\n      confirmed: false,\r\n      key: '',\r\n      dateFormatDate: '',\r\n      //startDate: new Date()\r\n      services: [],\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  onCollectionUpdate = (querySnapshot) => {\r\n    const services = [];\r\n    querySnapshot.forEach((doc) => {\r\n      const { idService, name, description } = doc.data();\r\n      services.push({\r\n        key: doc.id,\r\n        doc, // DocumentSnapshot\r\n        idService,\r\n        name,\r\n        description\r\n      });\r\n    });\r\n    this.setState({\r\n      services\r\n   });  \r\n  }\r\n\r\n  componentDidMount() {\r\n    const ref = firebase.firestore().collection('agendas').doc(this.props.match.params.id);\r\n    ref.get().then((doc) => {\r\n      if (doc.exists) {\r\n        const Coment = doc.data();\r\n        this.setState({\r\n          key: doc.id,\r\n          service: Coment.service,\r\n          dateFormatString: Coment.dateFormatString,\r\n          client: Coment.client,\r\n          confirmed: Coment.confirmed,\r\n          dateFormatDate: Coment.dateFormatDate,\r\n          //startDate: Date(Coment.dateFormatString)\r\n        });\r\n      } else {\r\n        console.log(\"No such document!\");\r\n      }\r\n    });\r\n    this.unsubscribe = this.list.onSnapshot(this.onCollectionUpdate);\r\n  }\r\n\r\n  handleChange(date) {\r\n    var options = {\r\n      weekday: \"long\", \r\n      year: \"numeric\", \r\n      month: \"long\", \r\n      day: \"numeric\", \r\n      hour: \"numeric\", \r\n      minute: \"numeric\", \r\n      hour12:\"false\"};\r\n    this.setState({        \r\n    startDate: date,    \r\n    dateFormatString: date.toLocaleString(\"es-Co\", options),\r\n    dateFormatDate: date\r\n    })\r\n  }\r\n\r\n  onChangeOnlyLetters = (e) => {      \r\n    const state = this.state\r\n    state[e.target.name] = e.target.value;\r\n    state[e.target.name] = state[e.target.name].replace(/[^A-Za-zÀ-ÿ]/ig, ' ')\r\n    this.setState(state);    \r\n  }\r\n\r\n  onChangeChecked = (e) => {    \r\n    this.setState({\r\n      confirmed: e.target.checked\r\n    })\r\n  }\r\n\r\n  onChange = (e) => {\r\n    const state = this.state\r\n    state[e.target.name] = e.target.value;\r\n    this.setState({state});\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { service, dateFormatString, client, confirmed, dateFormatDate } = this.state;\r\n\r\n    const updateRef = firebase.firestore().collection('agendas').doc(this.state.key);\r\n    updateRef.set({\r\n      service,\r\n      dateFormatString,\r\n      client,\r\n      confirmed,\r\n      dateFormatDate\r\n    }).then((docRef) => {\r\n      this.setState({\r\n        key: '',\r\n        service: '',\r\n        dateFormatString: '',\r\n        client: '',\r\n        confirmed: false,\r\n        dateFormatDate: ''\r\n      });\r\n      //this.props.history.push(\"/show/\"+this.props.match.params.id)\r\n      this.props.history.push(\"/AdminApp\")\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error adding document: \", error);\r\n    });\r\n    alert(\"Registro Editado Exitosamente!!\")\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"container\">\r\n        <div class=\"panel panel-default\">\r\n          <div class=\"panel-heading\">\r\n            <h3 class=\"panel-title\">\r\n              EDITAR AGENDAMIENTO\r\n            </h3>\r\n          </div>\r\n          <div class=\"panel-body\">\r\n            <h4><Link to={`/show/${this.state.key}`} class=\"btn btn-primary\">Volver</Link></h4>\r\n            <form onSubmit={this.onSubmit}>\r\n              <div class=\"form-group\">\r\n                <label for=\"select-service\">Tipo de Servicio</label>\r\n                <div>\r\n                <select name=\"service\" \r\n                        id=\"select-service\" \r\n                        value={this.state.service}\r\n                        onChange={this.onChange}\r\n                        data-toggle=\"tooltip\"\r\n                        title=\"Escoge un Servicio\"\r\n                        required>\r\n                {this.state.services.map(Service =>\r\n                  <option>{Service.name}</option>                  \r\n                )}\r\n                </select>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"dateFormatString\">Fecha y Hora</label>                \r\n                <div>\r\n                <DatePicker      \r\n                    selected={ this.state.startDate }\r\n                    onChange={ this.handleChange }\r\n                    showTimeSelect\r\n                    locale=\"es\"\r\n                    timeFormat=\"h:mm aa\"\r\n                    name=\"startDate\"\r\n                    timeIntervals={30}\r\n                    timeCaption=\"Hora\"\r\n                    dateFormat=\"d MMMM, yyyy h:mm aa\"\r\n                    className=\"form-control\"\r\n                    placeholderText={this.state.dateFormatString}\r\n                    data-toggle=\"tooltip\"\r\n                        title=\"Escoge una Fecha\"\r\n                />\r\n                </div>\r\n              </div>\r\n              <div class=\"form-group\">                \r\n                <label for=\"client\">Nombre del Cliente</label>\r\n                <input\r\n                  type=\"text\" \r\n                  class=\"form-control\"\r\n                  name=\"client\" \r\n                  value={this.state.client} \r\n                  onChange={this.onChangeOnlyLetters} \r\n                  placeholder=\"Nombre del Cliente\"\r\n                  minlength=\"5\"\r\n                  maxlength=\"40\"\r\n                  data-toggle=\"tooltip\"\r\n                  title=\"Ingresa tu Nombre\"              \r\n                  required\r\n                  />\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <div>\r\n                <label for=\"confirmed\">Agenda Confirmada</label>\r\n                  <div>\r\n                  <input \r\n                    style={{ width: 16, height: 16 }}\r\n                    type=\"checkbox\"\r\n                    value={this.state.confirmed}\r\n                    checked={this.state.confirmed} \r\n                    onChange={this.onChangeChecked}\r\n                    data-toggle=\"tooltip\"\r\n                    title=\"Click para Agendar Servicio\" \r\n                  />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <button type=\"submit\" class=\"btn btn-success\">Guardar Cambios</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Edit;\r\n","//import * as firebase from 'firebase';\r\n//import firestore from 'firebase/firestore'\r\nimport * as firebase from 'firebase/app';\r\n\r\nconst settings = {};\r\nconst config ={\r\n    apiKey: \"AIzaSyBr3_c6K2hMVNIa1A-rtFcYgqXZznzRVrs\",\r\n    authDomain: \"reactagenda-5ed74.firebaseapp.com\",\r\n    databaseURL: \"https://reactagenda-5ed74.firebaseio.com\",\r\n    projectId: \"reactagenda-5ed74\",\r\n    storageBucket: \"reactagenda-5ed74.appspot.com\",\r\n    messagingSenderId: \"931384845335\",\r\n    appId: \"1:931384845335:web:31aa6d2bf2b72e1c7e6852\"\r\n};\r\n\r\n/*\r\nconst config = {\r\n    apiKey: \"AIzaSyBvEExkkpTBf3VYfL7PVScolkMQtP_3q5E\",\r\n    authDomain: \"reactagenda-93ffc.firebaseapp.com\",\r\n    databaseURL: \"https://reactagenda-93ffc.firebaseio.com\",\r\n    projectId: \"reactagenda-93ffc\",\r\n    storageBucket: \"reactagenda-93ffc.appspot.com\",\r\n    messagingSenderId: \"753510908364\",\r\n    appId: \"1:753510908364:web:5396f044547c92efdf9d69\"\r\n};*/\r\n\r\n\r\n\r\nfirebase.initializeApp(config);\r\n\r\nfirebase.firestore().settings(settings);\r\n\r\nexport default firebase;\r\n\r\n/*import firebase from 'firebase';\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyBvEExkkpTBf3VYfL7PVScolkMQtP_3q5E\",\r\n    authDomain: \"reactagenda-93ffc.firebaseapp.com\",\r\n    databaseURL: \"https://reactagenda-93ffc.firebaseio.com\",\r\n    projectId: \"reactagenda-93ffc\",\r\n    storageBucket: \"reactagenda-93ffc.appspot.com\",\r\n    messagingSenderId: \"753510908364\",\r\n    appId: \"1:753510908364:web:5396f044547c92efdf9d69\",\r\n});\r\n\r\n\r\nconst auth = firebaseApp.auth();\r\nconst db = firebaseApp.firestore();\r\n\r\nexport { db, auth };*/","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport '../App.css';\r\nimport DatePicker, {registerLocale} from 'react-datepicker';\r\nimport firebase from '../Firebase';\r\n//import * as firebase from 'firebase/app';\r\n//import 'firebase/auth';\r\n//import 'firebase/firestore';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport es from 'date-fns/locale/es';\r\nregisterLocale(\"es\", es);\r\n\r\nclass Create extends Component {\r\n\r\n  constructor (props) {\r\n    const options = {\r\n      weekday: \"long\", \r\n      year: \"numeric\", \r\n      month: \"long\", \r\n      day: \"numeric\", \r\n      hour: \"numeric\", \r\n      minute: \"numeric\", \r\n      hour12:\"false\"};\r\n      \r\n    super(props)\r\n    this.ref = firebase.firestore().collection('agendas');\r\n    this.list = firebase.firestore().collection('services').orderBy('idService', 'asc');\r\n    this.state = {\r\n    service: '',\r\n    dateFormatString: new Date().toLocaleString(\"es-Co\", options),\r\n    client: '',\r\n    confirmed: false ,\r\n    dateFormatDate: new Date(),\r\n    startDate: '',\r\n    services: []\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);    \r\n    this.unsubscribe = null;    \r\n    }\r\n  \r\n    onCollectionUpdate = (querySnapshot) => {\r\n      const services = [];\r\n      querySnapshot.forEach((doc) => {\r\n        const { idService, name, description } = doc.data();\r\n        services.push({\r\n          key: doc.id,\r\n          doc, // DocumentSnapshot\r\n          idService,\r\n          name,\r\n          description\r\n        });\r\n      });\r\n      this.setState({\r\n        services\r\n     });  \r\n    }\r\n  \r\n    componentDidMount() {\r\n      this.unsubscribe = this.list.onSnapshot(this.onCollectionUpdate);  \r\n    }\r\n  \r\n  handleChange(date) {\r\n    var options = {\r\n      weekday: \"long\", \r\n      year: \"numeric\", \r\n      month: \"long\", \r\n      day: \"numeric\", \r\n      hour: \"numeric\", \r\n      minute: \"numeric\", \r\n      hour12:\"false\"};\r\n    this.setState({        \r\n    startDate: date,    \r\n    dateFormatString: date.toLocaleString(\"es-Co\", options),\r\n    dateFormatDate: date\r\n    })\r\n  }\r\n\r\n  onChangeOnlyLetters = (e) => {      \r\n    const state = this.state\r\n    state[e.target.name] = e.target.value;\r\n    state[e.target.name] = state[e.target.name].replace(/[^A-Za-zÀ-ÿ]/ig, ' ')\r\n    this.setState(state);    \r\n  }\r\n  \r\n  onChange = (e) => {      \r\n    const state = this.state\r\n    state[e.target.name] = e.target.value;    \r\n    this.setState(state);\r\n    {console.log(\"OnChange \",e.target.value)}\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { service, dateFormatString, client, confirmed, dateFormatDate } = this.state;\r\n    \r\n    this.ref.add({\r\n      service,\r\n      dateFormatString,\r\n      client,\r\n      confirmed,\r\n      dateFormatDate\r\n    }).then((docRef) => {\r\n      this.setState({\r\n        service: '',\r\n        dateFormatString: '',\r\n        client: '',\r\n        confirmed: false,\r\n        dateFormatDate: ''\r\n      });\r\n      this.props.history.push(\"/AdminApp\")\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error adding document: \", error);\r\n    });\r\n    alert(\"Registro Creado Exitosamente!!\")\r\n  }\r\n  \r\n  render() {\r\n    const { service, dateFormatString, client, confirmed } = this.state;    \r\n    return (\r\n      <div class=\"container\">\r\n        <div class=\"panel panel-default\">\r\n          <div class=\"panel-heading\">\r\n            <h3 class=\"panel-title\">\r\n              AGENDAR NUEVO SERVICIO\r\n            </h3>\r\n          </div>\r\n          <div class=\"panel-body\">\r\n            <h4><Link to=\"/\" class=\"btn btn-primary\">Volver</Link></h4>\r\n            <form onSubmit={this.onSubmit}>\r\n              <div class=\"form-group\">\r\n                <label for=\"select-service\">Tipo de Servicio</label>\r\n                <div>\r\n                <select name=\"service\" \r\n                        id=\"select-service\" \r\n                        value={service} \r\n                        onChange={this.onChange} \r\n                        data-toggle=\"tooltip\"\r\n                        title=\"Escoge un Servicio\"\r\n                        required>\r\n                <option value=\"\" selected disabled hidden>Escoge un Servicio...</option>\r\n                {this.state.services.map(Service =>\r\n                  <option>{Service.name}</option>                  \r\n                )}                \r\n                </select>\r\n                </div>              \r\n              </div>    \r\n              <div class=\"form-group\">\r\n                <label for=\"dateFormatString\">Fecha y Hora</label>                \r\n                <div>\r\n                <DatePicker                    \r\n                    selected={ this.state.startDate }\r\n                    onChange={ this.handleChange }\r\n                    showTimeSelect\r\n                    locale=\"es\"\r\n                    timeFormat=\"h:mm aa\"\r\n                    name=\"startDate\"\r\n                    timeIntervals={30}\r\n                    timeCaption=\"Hora\"\r\n                    dateFormat=\"d MMMM, yyyy h:mm aa\"\r\n                    className=\"form-control\"\r\n                    placeholderText=\"Click para Escoger una Fecha\"\r\n                    data-toggle=\"tooltip\"\r\n                    title=\"Escoge una Fecha\"\r\n                    required={true}\r\n                />\r\n                </div>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label for=\"client\">Nombre del Cliente</label>\r\n                <input\r\n                  type=\"text\" \r\n                  class=\"form-control\"\r\n                  name=\"client\" \r\n                  value={client} \r\n                  onChange={this.onChangeOnlyLetters} \r\n                  placeholder=\"Nombre del Cliente\"\r\n                  minlength=\"5\"\r\n                  maxlength=\"40\"\r\n                  data-toggle=\"tooltip\"\r\n                  title=\"Ingresa tu Nombre\"\r\n                  required\r\n                  />\r\n              </div>              \r\n              <button type=\"submit\" class=\"btn btn-success\">Aceptar</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Create;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../App.css';\r\n//import firebase from '../Firebase';\r\nimport * as firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nclass Show extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      Coment: {}, \r\n      key: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const ref = firebase.firestore().collection('agendas').doc(this.props.match.params.id);\r\n    ref.get().then((doc) => {\r\n      if (doc.exists) {\r\n        this.setState({\r\n          Coment: doc.data(),\r\n          key: doc.id,\r\n          isLoading: false\r\n        });        \r\n      } else {\r\n        console.log(\"No such document!\");\r\n      }\r\n    });\r\n  }\r\n\r\n  delete(id){\r\n    firebase.firestore().collection('agendas').doc(id).delete().then(() => {\r\n      alert(\"Registro Eliminado Exitosamente!!\")    \r\n      console.log(\"Document successfully deleted!\");\r\n      this.props.history.push(\"/AdminApp\")\r\n    }).catch((error) => {\r\n      console.error(\"Error removing document: \", error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"container\">\r\n        <div class=\"panel panel-default\">\r\n          <div class=\"panel-heading\">\r\n          <h3 class=\"panel-title\">\r\n              DETALLE DEL AGENDAMIENTO\r\n            </h3>                      \r\n          <h4><Link to=\"/AdminApp\" class=\"btn btn-primary\">Volver</Link></h4>\r\n          </div>\r\n          <hr/>\r\n          <div class=\"panel-body\">\r\n            <dl>\r\n              <dt>Tipo de Servicio</dt>\r\n              <dd>{this.state.Coment.service}</dd>\r\n              <dt>Fecha y Hora</dt>\r\n              <dd>{this.state.Coment.dateFormatString}</dd>\r\n              <dt>Nombre del Cliente</dt>\r\n              <dd>{this.state.Coment.client}</dd>\r\n              <dt>Agenda Confirmada</dt>\r\n              <dd><input style={{ width: 16, height: 16 }} type=\"checkbox\" checked={this.state.Coment.confirmed}  /></dd>\r\n            </dl>\r\n            <Link to={`/edit/${this.state.key}`} class=\"btn btn-success\">Editar</Link>&nbsp;\r\n            <button onClick={this.delete.bind(this, this.state.key)} class=\"btn btn-danger\">Eliminar</button>            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Show;\r\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\n//import firebase from './Firebase';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.ref = firebase.firestore().collection('agendas').orderBy('dateFormatDate', 'desc');\n    this.unsubscribe = null;\n    this.state = {\n      agendas: [],\n      date: new Date()\n    };\n  }\n\n  onCollectionUpdate = (querySnapshot) => {\n    const agendas = [];\n    querySnapshot.forEach((doc) => {\n      const { service, dateFormatString, client, confirmed, dateFormatDate } = doc.data();\n      agendas.push({\n        key: doc.id,\n        doc, // DocumentSnapshot\n        service,\n        dateFormatString,\n        client,\n        confirmed,\n        dateFormatDate\n      });\n    });\n    this.setState({\n      agendas\n   });   \n  }\n\n  componentDidMount() {\n    this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate);\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n  \n  activeDate(dataComent){\n    return (                    \n      <tbody>\n      <tr bgcolor=\"#fff\">\n        <td><Link to={`/show/${dataComent.key}`} class=\"btn btn-primary btn-sm\">Detalle</Link></td>\n        <td>{dataComent.service}</td>\n        <td>{dataComent.dateFormatString}</td>\n        <td>{dataComent.client}</td>\n        <td><input style={{ width: 16, height: 16 }} type=\"checkbox\" checked={dataComent.confirmed}  /></td>\n      </tr>                    \n      </tbody>\n    )\n  };\n\n  noActiveDate(dataComent){\n    return (                    \n      <tbody>\n      <tr bgcolor=\"#ddd\">\n        <td><Link to={`/show/${dataComent.key}`} class=\"btn btn-primary btn-sm\">Detalle</Link></td>\n        <td><s>{dataComent.service}</s></td>\n        <td><s>{dataComent.dateFormatString}</s></td>\n        <td><s>{dataComent.client}</s></td>\n        <td><input style={{ width: 16, height: 16 }} type=\"checkbox\" checked={dataComent.confirmed}  /></td>\n      </tr>                    \n      </tbody>\n    )\n  };\n\n  render() {\n    const options = {\n      weekday: \"long\", \n      year: \"numeric\", \n      month: \"long\", \n      day: \"numeric\", \n      hour: \"numeric\", \n      minute: \"numeric\",\n      second: \"numeric\",\n      hour12:\"false\"};\n    \n    \n\n    return (\n      <div class=\"container\">\n        <div class=\"panel panel-default\">\n          <div class=\"panel-heading\">          \n            <h3 class=\"panel-title\">\n              AREA DE ADMINISTRADOR - SERVICIOS AGENDADOS\n            </h3>\n          </div>\n          <div class=\"panel-body\">\n          <h4><Link to={\"/create\"} class=\"btn btn-primary\">Agendar Nuevo Servicio</Link></h4>\n          <div>\n            <strong>Fecha y hora actual </strong>\n          </div>\n          <div>\n            <label>{this.state.date.toLocaleString(\"es-Co\", options)}</label>         \n          </div>         \n            <table class=\"table table-stripe\">\n              <thead>\n                <tr>\n                  <th>Detalle del Servicio</th>\n                  <th>Tipo de Servicio</th>\n                  <th>Fecha y Hora</th>\n                  <th>Nombre del Cliente</th>\n                  <th>Agenda Confirmada</th>\n                </tr>\n              </thead>\n               { this.state.agendas.map(Coment =>                 \n                  {if (Coment.dateFormatDate.toDate().getFullYear(\"en-EN\") > this.state.date.getFullYear(\"en-EN\")) {\n                    let dateIsActive = this.activeDate(Coment);\n                    return(\n                      dateIsActive\n                    )\n                  } \n                    if (Coment.dateFormatDate.toDate().getFullYear(\"en-EN\") < this.state.date.getFullYear(\"en-EN\")) {                      \n                      let dateIsNotActive = this.noActiveDate(Coment);\n                      return(\n                      dateIsNotActive\n                      )                   \n                    }\n                      if (Coment.dateFormatDate.toDate().getFullYear(\"en-EN\") == this.state.date.getFullYear(\"en-EN\")) {\n                        if (Coment.dateFormatDate.toDate().getMonth(\"en-EN\") > this.state.date.getMonth(\"en-EN\")) {                      \n                          let dateIsActive = this.activeDate(Coment);\n                          return(\n                            dateIsActive\n                          )\n                      }\n                        if (Coment.dateFormatDate.toDate().getMonth(\"en-EN\") < this.state.date.getMonth(\"en-EN\")) {                      \n                            let dateIsNotActive = this.noActiveDate(Coment);\n                            return(\n                              dateIsNotActive\n                            )\n                        }\n                          if (Coment.dateFormatDate.toDate().getMonth(\"en-EN\") == this.state.date.getMonth(\"en-EN\")) {                      \n                            if (Coment.dateFormatDate.toDate().getDate(\"en-EN\") > this.state.date.getDate(\"en-EN\")) {                      \n                                let dateIsActive = this.activeDate(Coment);\n                                return(\n                                  dateIsActive\n                                )\n                            }\n                              if (Coment.dateFormatDate.toDate().getDate(\"en-EN\") < this.state.date.getDate(\"en-EN\")) {                      \n                                let dateIsNotActive = this.noActiveDate(Coment);\n                                return(\n                                  dateIsNotActive\n                                )\n                              }\n                                if (Coment.dateFormatDate.toDate().getDate(\"en-EN\") == this.state.date.getDate(\"en-EN\")) {                      \n                                  if (Coment.dateFormatDate.toDate().getHours(\"en-EN\") > this.state.date.getHours(\"en-EN\")) {                      \n                                    let dateIsActive = this.activeDate(Coment);\n                                    return(\n                                      dateIsActive\n                                    )\n                                  }\n                                    if (Coment.dateFormatDate.toDate().getHours(\"en-EN\") < this.state.date.getHours(\"en-EN\")) {                      \n                                      let dateIsNotActive = this.noActiveDate(Coment);\n                                      return(\n                                        dateIsNotActive\n                                      )\n                                    }\n                                      if (Coment.dateFormatDate.toDate().getHours(\"en-EN\") == this.state.date.getHours(\"en-EN\")) {                      \n                                        if (Coment.dateFormatDate.toDate().getMinutes(\"en-EN\") > this.state.date.getMinutes(\"en-EN\")) {                      \n                                          let dateIsActive = this.activeDate(Coment);\n                                          return(\n                                            dateIsActive\n                                          )\n                                        }\n                                          if (Coment.dateFormatDate.toDate().getMinutes(\"en-EN\") < this.state.date.getMinutes(\"en-EN\")) {                      \n                                            let dateIsNotActive = this.noActiveDate(Coment);\n                                            return(\n                                              dateIsNotActive\n                                            )\n                                          }\n                                            if (Coment.dateFormatDate.toDate().getMinutes(\"en-EN\") == this.state.date.getMinutes(\"en-EN\")) {                      \n                                              if (Coment.dateFormatDate.toDate().getSeconds(\"en-EN\") >= this.state.date.getSeconds(\"en-EN\")) {                      \n                                                let dateIsActive = this.activeDate(Coment);\n                                                return(\n                                                  dateIsActive\n                                                )\n                                              } else {                      \n                                                let dateIsNotActive = this.noActiveDate(Coment);\n                                                return(\n                                                  dateIsNotActive\n                                                )\n                                              }                              \n                                            }\n                                        }\n                                  }\n                            }\n                      }                                          \n                   }                                  \n                )}              \n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport Edit from './components/Edit';\nimport Create from './components/Create';\nimport Show from './components/Show';\nimport AdminApp from './components/AdminApp';\nimport Appcss from './App.css'\nimport {\n    BrowserRouter,\n    Switch,\n  } from \"react-router-dom\";\n  \n\n//import registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(    \n    <Router basename={process.env.PUBLIC_URL}>        \n        <div>\n\n                <Route exact path='/' component={App} />\n                <Route path='/edit/:id' component={Edit} />\n                <Route path='/create' component={Create} />\n                <Route path='/show/:id' component={Show} />\n                <Route path='/AdminApp' component={AdminApp} />\n        </div>\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//registerServiceWorker();\n"],"sourceRoot":""}